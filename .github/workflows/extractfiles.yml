# This is a basic workflow to help you get started with Actions

name: extract-files-validation

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
        
  ubuntu_validation_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Extract Files
        uses: actions/github-script@v4
        env:
         DESTINATION_FOLDER: base_folder
         ARCHIVE_FILE_PATTERNS: "**/*.zip"
        with:
         script: |-
          const fs = require('fs').promises
          const path = require('path')
          const { exec } = require("child_process")
          
          const target = path.resolve(process.env.DESTINATION_FOLDER)
          const patterns = process.env.ARCHIVE_FILE_PATTERNS
          const globber = await glob.create(patterns)
          await io.mkdirP(path.dirname(target))
          
          for await (const file of globber.globGenerator()) {
            if ((await fs.lstat(file)).isDirectory()) continue
            console.log(`7z x ${file} -o${target} -aoa`)
            await exec(`7z x ${file} -o${target} -aoa`, (error, stdout, stderr) => {
             if (error) {
               console.error(`exec error: ${error}`);
                return;
                }
                console.log(`stdout: ${stdout}`);
            });
          }
      - name: Repo file structure
        shell: bash
        run: |-
         tree
         
  windows_validation_job:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm i @actions/exec
      - name: Extract Files
        uses: actions/github-script@v4
        env:
         DESTINATION_FOLDER: base_folder
         FILE_PATTERNS: "**/*.zip"
       
        with:
         script: |-         
            const fs = require('fs').promises
            const path = require('path')
            const exec = require('@actions/exec');

            const target = path.resolve(process.env.DESTINATION_FOLDER)
            const patterns = process.env.FILE_PATTERNS
            const globber = await glob.create(patterns)

            await io.mkdirP(path.dirname(target))

            for await (const file of globber.globGenerator()) {
             if ((await fs.lstat(file)).isDirectory()) continue                  
             console.log(`7z x ${file} -o${target} -aoa`)
             await exec.exec(`7z x ${file} -o${target} -aoa`)
             }
          

